<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CheckFilterStartMessage" xml:space="preserve">
    <value>This scenario demonstrates how to determine if an event will be logged based upon the configured filters.</value>
    <comment> </comment>
  </data>
  <data name="CustomizedSinkEndMessage" xml:space="preserve">
    <value>The quick start has logged an event by using a custom trace listener. Please check on the debugger's output for more details on the logged event.</value>
  </data>
  <data name="CustomizedSinkStartMessage" xml:space="preserve">
    <value>The scenario logs information to a custom trace listener. </value>
  </data>
  <data name="DebugSinkMessage" xml:space="preserve">
    <value>Event logged by Debug Sink:
	Event ID: {0}
	Message: "{1}".</value>
    <comment>.
 Parameters: 0 - id (int), 1 - msg (string) </comment>
  </data>
  <data name="DebugSinkTestMessage" xml:space="preserve">
    <value>This message should be displayed by the debugger.</value>
  </data>
  <data name="DefaultCategoryMessage" xml:space="preserve">
    <value>The category "General" sends log information to the event log by default. Please go to event viewer to see the logged information.</value>
  </data>
  <data name="EventProcessedMessage" xml:space="preserve">
    <value>The event with EventId {0} has been processed by the Logging and Instrumentation Application Block.

The default QuickStart configuration includes listeners to log event information to the application event log, the trace.log text file, and the Visual Studio Output Window. </value>
    <comment> For localizers and UE (These comments will be seen in LocStudio).
 Parameters: 0 - id (int) </comment>
  </data>
  <data name="ExtraInformationEndMessage" xml:space="preserve">
    <value>The Quick Start has finished logging the extra information. The default configuration of the Quick Starts sends the entries to the event log.</value>
  </data>
  <data name="ExtraInformationStartMessage" xml:space="preserve">
    <value>This scenario is logging extra information to the destination specified by the default category. </value>
  </data>
  <data name="InvalidCategoryMessage" xml:space="preserve">
    <value>A category is required</value>
  </data>
  <data name="InvalidDataMessage" xml:space="preserve">
    <value>You have entered some invalid information. Please correct the following before proceeding:

</value>
  </data>
  <data name="InvalidEventIDMessage" xml:space="preserve">
    <value>Event ID must be numeric
</value>
  </data>
  <data name="InvalidPriorityMessage" xml:space="preserve">
    <value>Priority must be numeric
</value>
  </data>
  <data name="LogEventStartMessage" xml:space="preserve">
    <value>The following log entry information will be submitted to the Logging and Instrumentation Application Block:

{0}</value>
    <comment>.
 Parameters: 0 - logEntry information (string)</comment>
  </data>
  <data name="QuickStartTitleMessage" xml:space="preserve">
    <value>Logging Application Block Quick Start</value>
  </data>
  <data name="SinkFailureMessage" xml:space="preserve">
    <value>Sink failed because: {0}.</value>
    <comment>.
 Parameters: 0 - exceptionString (string) </comment>
  </data>
  <data name="TraceDoneMessage" xml:space="preserve">
    <value>The Quick Start has finished executing the tracing scenario. The default configuration of the Quick Starts sends the trace messages to the flat file sink and logs the troubleshooting message to the event log. Please examine the file {0} for the trace information.</value>
    <comment>.
 Parameters: 0 - filename (string) </comment>
  </data>
  <data name="TraceStartMessage" xml:space="preserve">
    <value>The Quick Start is using the Tracer class to trace activities and log context information. The following call stack will be traced:

  traceButton_Click
      DoDataAccess
          DoTroubleshooting
</value>
  </data>
  <data name="TracingCategoryMessage" xml:space="preserve">
    <value>The category "Trace" sends log information to the file {0} by default. Please examine this file to see if the information was logged.</value>
    <comment>.
 Parameters: 0 - filename (string) </comment>
  </data>
</root>