<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AbsoluteTimeExpirationMessage" xml:space="preserve">
    <value>The item is expected to change and should be refreshed at a defined time.</value>
  </data>
  <data name="AddItemToCacheMessage" xml:space="preserve">
    <value>Item added to cache
Key: {0}
Product Name: {1}
Product Price: {2}
Expiration: {3}
Priority: {4}</value>
  </data>
  <data name="CacheSourceMessage" xml:space="preserve">
    <value>Item read from cache
Key: {0}
Name: {1}
Price: {2}</value>
  </data>
  <data name="DataSavedMessage" xml:space="preserve">
    <value>Data in storage was updated</value>
  </data>
  <data name="ExtendedFormatExpirationMessage" xml:space="preserve">
    <value>The item has a particular lifetime, and should be expired upon completion of that lifetime.</value>
  </data>
  <data name="FileDependencyExpirationMessage" xml:space="preserve">
    <value>The item's lifetime is tied to a particular file. When that file changes, the item will be considered to be expired.</value>
  </data>
  <data name="FlushCacheMessage" xml:space="preserve">
    <value>Cache has been flushed by user</value>
  </data>
  <data name="InvalidInputMessage" xml:space="preserve">
    <value>The following fields are required: Key, Product Name, Product Price.</value>
  </data>
  <data name="InvalidKeyMessage" xml:space="preserve">
    <value>The following field is required: Key</value>
  </data>
  <data name="InvalidSelectionMessage" xml:space="preserve">
    <value>Please select an item</value>
  </data>
  <data name="ItemNotAvailableMessage" xml:space="preserve">
    <value>Item is no longer available</value>
  </data>
  <data name="ItemNotFoundMessage" xml:space="preserve">
    <value>Item not found in cache
Key: {0}</value>
  </data>
  <data name="MasterSourceMessage" xml:space="preserve">
    <value>Item read from master and added to cache
Key: {0}
Name: {1}
Price: {2}</value>
  </data>
  <data name="NeverExpiredExpirationMessage" xml:space="preserve">
    <value>The master copy of the item is not expected to change and the item will never be expired.</value>
  </data>
  <data name="ProactiveLoadMessage" xml:space="preserve">
    <value>The cache has been loaded with entire set of data</value>
  </data>
  <data name="QuickStartTitleMessage" xml:space="preserve">
    <value>Caching Quick Start</value>
  </data>
  <data name="ReadItemFromCacheMessage" xml:space="preserve">
    <value>Item read from cache
Key: {0}
Name: {1}
Price: {2}</value>
  </data>
  <data name="ReadItemMessage" xml:space="preserve">
    <value>Items are retrieved from the cache by their key. Enter the key of the item you would like to retrieve from the cache.</value>
  </data>
  <data name="ReadItemTitleMessage" xml:space="preserve">
    <value>Read Item from Cache</value>
  </data>
  <data name="RemoveItemFromCacheMessage" xml:space="preserve">
    <value>Remove operation complete.</value>
  </data>
  <data name="RemoveItemMessage" xml:space="preserve">
    <value>Items are removed from the cache by their key. Enter the key of the item you would like to remove from the cache.</value>
  </data>
  <data name="RemoveItemTitleMessage" xml:space="preserve">
    <value>Remove Item from Cache</value>
  </data>
  <data name="SlidingTimeExpirationMessage" xml:space="preserve">
    <value>Whenever the item is not accessed for a specified time, it should be considered stale, and expired.</value>
  </data>
</root>